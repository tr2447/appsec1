Writeup for part3 of Homework Assignment 1
------------------------------------------

After running our testcases from part 2 which are crash1.gft, crash2.gft, hang.gft & example.gft, we found below code coverage percentage.
File 'giftcardreader.c'
Lines executed:53.22% of 171
Creating 'giftcardreader.c.gcov'
The coverage report for this can also be seen in the part3/gc_part2_test/index.html file.

Now, for 2 part of uncovered code, 2 new gft files are created with following characteristics to increase the code coverage.
---------------------------------------------------------------

<cov1.gft>
- Initial, testcases from part2 were created with record type: 2 & 3. So, the code for the record type 1 was not covered. cov1.gft is created with record type 1 and will cover the lines in function: gift_card_json():

>> if (gcrd_ptr->type_of_record == 1) {
            printf("      \"record_type\": \"amount_change\",\n");
            gcac_ptr = gcrd_ptr->actual_record;
            printf("      \"amount_added\": %d,\n",gcac_ptr->amount_added);
            if (gcac_ptr->amount_added>0) {
                printf("      \"signature\": \"%32.32s\"\n",gcac_ptr->actual_signature);
            }
	}

This increased the code coverage percentage to -
File 'giftcardreader.c'
Lines executed:71.35% of 171
Creating 'giftcardreader.c.gcov'
-----------------------------------------------------------------

<cov2.gft> 

- Also, the testcases from part2 did not covered any switch cases other then the \0x01 and \0x09 cases. So, cov2.gft is created with program data bytes with values "\x10\04\09". This will invoke the lines from switch case \0x10.

This increased the code coverage further to -
File 'giftcardreader.c'
Lines executed:73.10% of 171
Creating 'giftcardreader.c.gcov'

The coverage report for this can also be seen in the part3/gc_part3_added_tests/index.html file.

------------------------------------------------------------

<fuzzer1.gft>

- This is the fuzzer generated crash testcase. This testcase invokes switch case \0x04. Here, the fuzzer1.gft when executed with giftcardreader will invoke animate function and execute the switch case \0x04.
- Here, the giftcard program data is trying to access out-of-bound register value by passing the arg2 value to be higher then 15.
- We added a check here that if arg2 is in the range (0, 15) then only allow the initialization else print to user Not a valid Giftcard value.
-------------------------------------------------------------

<fuzzer2.gft>

- This is the fuzzer generated hang testcase. This testcase invokes switch case \0x10. Here, fuzzer2.gft when executed with giftcardreader will invoke animate function and execute the switch case \0x10 and will go on a repeated loop running infinitely.
- This is due to giftcard program data value which is an higher value which is being passed in the giftcardreader in arg1 in animate. Now, it is type casted as char arg1 and assigned to program counter(pc) whose value is decremented in this switch case and then we increment the pc value by 3. The value of pc is then re-assigned in case \0x10 and this keeps on repeating as pc value never goes beyond size of <program+256>.
- To fix this case, we change code in switch case \0x10 as follows:
> if (zf) pc += (unsigned char)arg1;
- Here, type casting as unsigned char will ensure that the pc value increases on regular interval and while loop breaks at a certain point.

After running the fuzzer test cases, we were able to achieve below code coverage percentage-
File 'giftcardreader.c'
Lines executed:83.33% of 174
Creating 'giftcardreader.c.gcov'

- The code coverage report for this can also be seen in the part3/gc_part3_fuzz_tests/index.html file.